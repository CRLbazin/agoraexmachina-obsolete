<?phpnamespace library\webComponents;/*** color picker web component* @author cyril bazin* @package cu.core*/class colorPicker extends \library\field{	protected $value = null;	protected $values = array();	protected $blank = true;		public function build()	{				array_push($this->values, "bg-black fg-white");		array_push($this->values, "bg-white fg-gray");		array_push($this->values, "bg-lime fg-white");		array_push($this->values, "bg-green fg-white");		array_push($this->values, "bg-emerald fg-white");		array_push($this->values, "bg-teal fg-white");		array_push($this->values, "bg-cyan fg-white");		array_push($this->values, "bg-cobalt fg-white");		array_push($this->values, "bg-indigo fg-white");		array_push($this->values, "bg-violet fg-white");		array_push($this->values, "bg-pink fg-white");		array_push($this->values, "bg-magenta fg-white");		array_push($this->values, "bg-crimson fg-white");		array_push($this->values, "bg-red fg-white");		array_push($this->values, "bg-orange fg-white");		array_push($this->values, "bg-lime fg-white");		array_push($this->values, "bg-amber fg-white");		array_push($this->values, "bg-yellow fg-white");		array_push($this->values, "bg-brown fg-white");		array_push($this->values, "bg-olive fg-white");		array_push($this->values, "bg-steel fg-white");		array_push($this->values, "bg-mauve fg-white");		array_push($this->values, "bg-lightMauve fg-gray");		array_push($this->values, "bg-taupe fg-white");		array_push($this->values, "bg-gray fg-white");		array_push($this->values, "bg-darkBrown fg-white");		array_push($this->values, "bg-darkCrimson fg-white");		array_push($this->values, "bg-darkMagenta fg-white");		array_push($this->values, "bg-darkIndigo fg-white");		array_push($this->values, "bg-darkCyan fg-white");		array_push($this->values, "bg-darkCobalt fg-white");		array_push($this->values, "bg-darkTeal fg-white");		array_push($this->values, "bg-darkEmerald fg-white");		array_push($this->values, "bg-darkGreen fg-white");		array_push($this->values, "bg-darkOrange fg-white");		array_push($this->values, "bg-darkRed fg-white");		array_push($this->values, "bg-darkPink fg-white");		array_push($this->values, "bg-darkViolet fg-white");		array_push($this->values, "bg-darkBlue fg-white");		array_push($this->values, "bg-lightBlue fg-white");		array_push($this->values, "bg-lightRed fg-white");		array_push($this->values, "bg-lightGreen fg-white");		array_push($this->values, "bg-lighterBlue fg-white");		array_push($this->values, "bg-lightTeal fg-white");		array_push($this->values, "bg-lightOlive fg-white");		array_push($this->values, "bg-lightOrange fg-white");		array_push($this->values, "bg-lightPink fg-white");		array_push($this->values, "bg-grayDark fg-white");		array_push($this->values, "bg-grayDarker fg-white");		array_push($this->values, "bg-grayLight fg-white");		array_push($this->values, "bg-grayLighter fg-gray");								$widget = '';				$widget .= '<select class="form-control" name="'.$this->name.'">';				if($this->blank == true)		    $widget .= "<option value=''></option>";		if($this->values <> "")    		foreach($this->values as $key=>$val)    		{    			$selected = ($key == $this->value) ? "selected='selected'" : "";    				$widget .= '<option class="'.$val.'" value="'.$val.'" '.$selected.'>'.$val.'</option>';        				     		}				return $widget .= ' </select>';	}}?>